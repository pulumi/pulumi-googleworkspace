// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getGroupMember(args: GetGroupMemberArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupMemberResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("googleworkspace:index/getGroupMember:getGroupMember", {
        "email": args.email,
        "groupId": args.groupId,
        "memberId": args.memberId,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupMember.
 */
export interface GetGroupMemberArgs {
    /**
     * The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
     */
    email?: string;
    /**
     * Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
     */
    groupId: string;
    /**
     * The unique ID of the group member. A member id can be used as a member request URI's memberKey.
     */
    memberId?: string;
}

/**
 * A collection of values returned by getGroupMember.
 */
export interface GetGroupMemberResult {
    /**
     * Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages.
     */
    readonly deliverySettings: string;
    /**
     * The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
     */
    readonly email?: string;
    /**
     * ETag of the resource.
     */
    readonly etag: string;
    /**
     * Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
     */
    readonly groupId: string;
    /**
     * The ID of this resource.
     */
    readonly id: string;
    /**
     * The unique ID of the group member. A member id can be used as a member request URI's memberKey.
     */
    readonly memberId?: string;
    /**
     * The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
     */
    readonly role: string;
    /**
     * Status of member.
     */
    readonly status: string;
    /**
     * The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user.
     */
    readonly type: string;
}

export function getGroupMemberOutput(args: GetGroupMemberOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupMemberResult> {
    return pulumi.output(args).apply(a => getGroupMember(a, opts))
}

/**
 * A collection of arguments for invoking getGroupMember.
 */
export interface GetGroupMemberOutputArgs {
    /**
     * The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
     */
    email?: pulumi.Input<string>;
    /**
     * Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
     */
    groupId: pulumi.Input<string>;
    /**
     * The unique ID of the group member. A member id can be used as a member request URI's memberKey.
     */
    memberId?: pulumi.Input<string>;
}
