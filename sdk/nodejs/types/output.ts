// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ChromePolicyPolicy {
    /**
     * The full qualified name of the policy schema.
     */
    schemaName: string;
    /**
     * JSON encoded map that represents key/value pairs that correspond to the given schema.
     */
    schemaValues: {[key: string]: string};
}

export interface GetGroupMembersMember {
    deliverySettings: string;
    email: string;
    /**
     * The ID of this resource.
     */
    id: string;
    role: string;
    status: string;
    type: string;
}

export interface GetPrivilegesItem {
    /**
     * ETag of the resource.
     */
    etag: string;
    isOrgUnitScopable: boolean;
    privilegeName: string;
    serviceId: string;
    serviceName: string;
}

export interface GetRolePrivilege {
    privilegeName: string;
    serviceId: string;
}

export interface GetSchemaField {
    /**
     * Display name for the schema.
     */
    displayName: string;
    /**
     * ETag of the resource.
     */
    etag: string;
    fieldId: string;
    fieldName: string;
    fieldType: string;
    indexed: boolean;
    multiValued: boolean;
    numericIndexingSpecs: outputs.GetSchemaFieldNumericIndexingSpec[];
    readAccessType: string;
}

export interface GetSchemaFieldNumericIndexingSpec {
    maxValue: number;
    minValue: number;
}

export interface GetUserAddress {
    country: string;
    countryCode: string;
    customType: string;
    extendedAddress: string;
    formatted: string;
    locality: string;
    poBox: string;
    postalCode: string;
    primary: boolean;
    region: string;
    sourceIsStructured: boolean;
    streetAddress: string;
    type: string;
}

export interface GetUserCustomSchema {
    schemaName: string;
    schemaValues: {[key: string]: string};
}

export interface GetUserEmail {
    address: string;
    customType: string;
    primary: boolean;
    type: string;
}

export interface GetUserExternalId {
    customType: string;
    type: string;
    value: string;
}

export interface GetUserIm {
    customProtocol: string;
    customType: string;
    im: string;
    primary: boolean;
    protocol: string;
    type: string;
}

export interface GetUserKeyword {
    customType: string;
    type: string;
    value: string;
}

export interface GetUserLanguage {
    customLanguage: string;
    languageCode: string;
}

export interface GetUserLocation {
    area: string;
    buildingId: string;
    customType: string;
    deskCode: string;
    floorName: string;
    floorSection: string;
    type: string;
}

export interface GetUserName {
    familyName: string;
    fullName: string;
    givenName: string;
}

export interface GetUserOrganization {
    costCenter: string;
    customType: string;
    department: string;
    description: string;
    domain: string;
    fullTimeEquivalent: number;
    location: string;
    /**
     * Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
     */
    name: string;
    primary: boolean;
    symbol: string;
    title: string;
    type: string;
}

export interface GetUserPhone {
    customType: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetUserPosixAccount {
    accountId: string;
    gecos: string;
    gid: string;
    homeDirectory: string;
    operatingSystemType: string;
    primary: boolean;
    shell: string;
    systemId: string;
    uid: string;
    username: string;
}

export interface GetUserRelation {
    customType: string;
    type: string;
    value: string;
}

export interface GetUserSshPublicKey {
    expirationTimeUsec: string;
    fingerprint: string;
    key: string;
}

export interface GetUserWebsite {
    customType: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GmailSendAsAliasSmtpMsa {
    /**
     * The hostname of the SMTP service.
     */
    host: string;
    /**
     * The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
     */
    password?: string;
    /**
     * The port of the SMTP service.
     */
    port: number;
    /**
     * The protocol that will be used to secure communication with the SMTP service. Defaults to `securityModeUnspecified`.
     */
    securityMode?: string;
    /**
     * The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
     */
    username?: string;
}

export interface SchemaField {
    /**
     * Display Name of the field.
     */
    displayName: string;
    /**
     * The ETag of the field.
     */
    etag: string;
    /**
     * The unique identifier of the field.
     */
    fieldId: string;
    /**
     * The name of the field.
     */
    fieldName: string;
    /**
     * The type of the field. Acceptable values are: BOOL, DATE, DOUBLE, EMAIL, INT64, PHONE, STRING
     */
    fieldType: string;
    /**
     * Boolean specifying whether the field is indexed or not. Defaults to `true`.
     */
    indexed?: boolean;
    /**
     * A boolean specifying whether this is a multi-valued field or not. Defaults to `false`.
     */
    multiValued?: boolean;
    /**
     * Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.
     */
    numericIndexingSpec?: outputs.SchemaFieldNumericIndexingSpec;
    /**
     * Specifies who can view values of this field. See Retrieve users as a non-administrator for more information. Acceptable values are: ADMINS*AND*SELF or ALL*DOMAIN*USERS. Note: It may take up to 24 hours for changes to this field to be reflected. Defaults to `ALL_DOMAIN_USERS`.
     */
    readAccessType?: string;
}

export interface SchemaFieldNumericIndexingSpec {
    maxValue?: number;
    minValue?: number;
}

export interface UserAddress {
    /**
     * Country
     */
    country?: string;
    /**
     * The country code. Uses the ISO 3166-1 standard.
     */
    countryCode?: string;
    /**
     * If the address type is custom, this property contains the custom value.
     */
    customType?: string;
    /**
     * For extended addresses, such as an address that includes a sub-region.
     */
    extendedAddress?: string;
    /**
     * A full and unstructured postal address. This is not synced with the structured address fields.
     */
    formatted?: string;
    /**
     * The town or city of the address.
     */
    locality?: string;
    /**
     * The post office box, if present.
     */
    poBox?: string;
    /**
     * The ZIP or postal code, if applicable.
     */
    postalCode?: string;
    /**
     * If this is the user's primary address. The addresses list may contain only one primary address.
     */
    primary?: boolean;
    /**
     * The abbreviated province or state.
     */
    region?: string;
    /**
     * Indicates if the user-supplied address was formatted. Formatted addresses are not currently supported.
     */
    sourceIsStructured?: boolean;
    /**
     * The street address, such as 1600 Amphitheatre Parkway. Whitespace within the string is ignored; however, newlines are significant.
     */
    streetAddress?: string;
    /**
     * The address type. Acceptable values: `custom`, `home`, `other`, `work`.
     */
    type: string;
}

export interface UserCustomSchema {
    /**
     * The name of the schema.
     */
    schemaName: string;
    /**
     * JSON encoded map that represents key/value pairs that correspond to the given schema.
     */
    schemaValues: {[key: string]: string};
}

export interface UserEmail {
    /**
     * The user's email address. Also serves as the email ID. This value can be the user's primary email address or an alias.
     */
    address?: string;
    /**
     * If the value of type is custom, this property contains the custom type string.
     */
    customType?: string;
    /**
     * Indicates if this is the user's primary email. Only one entry can be marked as primary. Defaults to `false`.
     */
    primary?: boolean;
    /**
     * The type of the email account. Acceptable values: `custom`, `home`, `other`, `work`.
     */
    type: string;
}

export interface UserExternalId {
    /**
     * If the external ID type is custom, this property contains the custom value and must be set.
     */
    customType?: string;
    /**
     * The type of external ID. If set to custom, customType must also be set. Acceptable values: `account`, `custom`, `customer`, `loginId`, `network`, `organization`.
     */
    type: string;
    /**
     * The value of the ID.
     */
    value: string;
}

export interface UserIm {
    /**
     * If the protocol value is custom_protocol, this property holds the custom protocol's string.
     */
    customProtocol?: string;
    /**
     * If the IM type is custom, this property holds the custom type string.
     */
    customType?: string;
    /**
     * The user's IM network ID.
     */
    im?: string;
    /**
     * If this is the user's primary IM. Only one entry in the IM list can have a value of true.
     */
    primary?: boolean;
    /**
     * An IM protocol identifies the IM network. The value can be a custom network or the standard network. Acceptable values: `aim`, `customProtocol`, `gtalk`, `icq`, `jabber`, `msn`, `netMeeting`, `qq`, `skype`, `yahoo`.
     */
    protocol: string;
    /**
     * Acceptable values: `custom`, `home`, `other`, `work`.
     */
    type: string;
}

export interface UserKeyword {
    /**
     * Custom Type.
     */
    customType?: string;
    /**
     * Each entry can have a type which indicates standard type of that entry. For example, keyword could be of type occupation or outlook. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value. Acceptable values: `custom`, `mission`, `occupation`, `outlook`
     */
    type: string;
    /**
     * Keyword.
     */
    value: string;
}

export interface UserLanguage {
    /**
     * Other language. A user can provide their own language name if there is no corresponding Google III language code. If this is set, LanguageCode can't be set.
     */
    customLanguage?: string;
    /**
     * Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.
     */
    languageCode?: string;
}

export interface UserLocation {
    /**
     * Textual location. This is most useful for display purposes to concisely describe the location. For example, Mountain View, CA or Near Seattle.
     */
    area?: string;
    /**
     * Building identifier.
     */
    buildingId?: string;
    /**
     * If the location type is custom, this property contains the custom value.
     */
    customType?: string;
    /**
     * Most specific textual code of individual desk location.
     */
    deskCode?: string;
    /**
     * Floor name/number.
     */
    floorName?: string;
    /**
     * Floor section. More specific location within the floor. For example, if a floor is divided into sections A, B, and C, this field would identify one of those values.
     */
    floorSection?: string;
    /**
     * The location type. Acceptable values: `custom`, `default`, `desk`
     */
    type: string;
}

export interface UserName {
    /**
     * The user's last name.
     */
    familyName: string;
    /**
     * The user's full name formed by concatenating the first and last name values.
     */
    fullName: string;
    /**
     * The user's first name.
     */
    givenName?: string;
}

export interface UserOrganization {
    /**
     * The cost center of the user's organization.
     */
    costCenter?: string;
    /**
     * If the value of type is custom, this property contains the custom value.
     */
    customType?: string;
    /**
     * Specifies the department within the organization, such as sales or engineering.
     */
    department?: string;
    /**
     * The description of the organization.
     */
    description?: string;
    /**
     * The domain the organization belongs to.
     */
    domain?: string;
    /**
     * The full-time equivalent millipercent within the organization (100000 = 100%)
     */
    fullTimeEquivalent?: number;
    /**
     * The physical location of the organization. This does not need to be a fully qualified address.
     */
    location?: string;
    /**
     * The name of the organization.
     */
    name?: string;
    /**
     * Indicates if this is the user's primary organization. A user may only have one primary organization.
     */
    primary?: boolean;
    /**
     * Text string symbol of the organization. For example, the text symbol for Google is GOOG.
     */
    symbol?: string;
    /**
     * The user's title within the organization. For example, member or engineer.
     */
    title?: string;
    /**
     * The type of organization. Acceptable values: `domainOnly`, `school`, `unknown`, `work`.
     */
    type: string;
}

export interface UserPhone {
    /**
     * If the value of type is custom, this property contains the custom type.
     */
    customType?: string;
    /**
     * Indicates if this is the user's primary phone number. A user may only have one primary phone number.
     */
    primary?: boolean;
    /**
     * The type of phone number. Acceptable values: `assistant`, `callback`, `car`, `companyMain` , `custom`, `grandCentral`, `home`, `homeFax`, `isdn`, `main`, `mobile`, `other`, `otherFax`, `pager`, `radio`, `telex`, `ttyTdd`, `work`, `workFax`, `workMobile`, `workPager`.
     */
    type: string;
    /**
     * A human-readable phone number. It may be in any telephone number format.
     */
    value: string;
}

export interface UserPosixAccount {
    /**
     * A POSIX account field identifier.
     */
    accountId?: string;
    /**
     * The GECOS (user information) for this account.
     */
    gecos?: string;
    /**
     * The default group ID.
     */
    gid?: string;
    /**
     * The path to the home directory for this account.
     */
    homeDirectory?: string;
    /**
     * The operating system type for this account. Acceptable values: `linux`, `unspecified`, `windows`.
     */
    operatingSystemType?: string;
    /**
     * If this is user's primary account within the SystemId.
     */
    primary?: boolean;
    /**
     * The path to the login shell for this account.
     */
    shell?: string;
    /**
     * System identifier for which account Username or Uid apply to.
     */
    systemId?: string;
    /**
     * The POSIX compliant user ID.
     */
    uid?: string;
    /**
     * The username of the account.
     */
    username?: string;
}

export interface UserRelation {
    /**
     * If the value of type is custom, this property contains the custom type string.
     */
    customType?: string;
    /**
     * The type of relation. Acceptable values: `adminAssistant`, `assistant`, `brother`, `child`, `custom`, `domesticPartner`, `dottedLineManager`, `execAssistant`, `father`, `friend`, `manager`, `mother`, `parent`, `partner`, `referredBy`, `relative`, `sister`, `spouse`.
     */
    type: string;
    /**
     * The name of the person the user is related to.
     */
    value: string;
}

export interface UserSshPublicKey {
    /**
     * An expiration time in microseconds since epoch.
     */
    expirationTimeUsec?: string;
    /**
     * A SHA-256 fingerprint of the SSH public key.
     */
    fingerprint: string;
    /**
     * An SSH public key.
     */
    key: string;
}

export interface UserWebsite {
    /**
     * The custom type. Only used if the type is custom.
     */
    customType?: string;
    /**
     * If this is user's primary website or not.
     */
    primary?: boolean;
    /**
     * The type or purpose of the website. For example, a website could be labeled as home or blog. Alternatively, an entry can have a custom type Custom types must have a customType value. Acceptable values: `appInstallPage`, `blog`, `custom`, `ftp` , `home`, `homePage`, `other`, `profile`, `reservations`, `resume`, `work`.
     */
    type: string;
    /**
     * The URL of the website.
     */
    value: string;
}
export namespace group {
    export interface GroupMembersMember {
        /**
         * Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages. Defaults to `ALL_MAIL`.
         */
        deliverySettings?: string;
        /**
         * The member's email address. A member can be a user or another group. This property isrequired when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
         */
        email: string;
        /**
         * The unique ID of the group member. A member id can be used as a member request URI's memberKey.
         */
        id: string;
        /**
         * The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER. Defaults to `MEMBER`.
         */
        role?: string;
        /**
         * Status of member.
         */
        status: string;
        /**
         * The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user. Defaults to `USER`.
         */
        type?: string;
    }

}

export namespace role {
    export interface RolePrivilege {
        /**
         * The name of the privilege.
         */
        privilegeName: string;
        /**
         * The obfuscated ID of the service this privilege is for.
         */
        serviceId: string;
    }

}
