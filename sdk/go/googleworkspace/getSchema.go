// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package googleWorkspace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSchema(ctx *pulumi.Context, args *LookupSchemaArgs, opts ...pulumi.InvokeOption) (*LookupSchemaResult, error) {
	var rv LookupSchemaResult
	err := ctx.Invoke("googleworkspace:index/getSchema:getSchema", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchema.
type LookupSchemaArgs struct {
	// The unique identifier of the schema.
	SchemaId *string `pulumi:"schemaId"`
	// The schema's name.
	SchemaName *string `pulumi:"schemaName"`
}

// A collection of values returned by getSchema.
type LookupSchemaResult struct {
	// Display name for the schema.
	DisplayName string `pulumi:"displayName"`
	// ETag of the resource.
	Etag string `pulumi:"etag"`
	// A list of fields in the schema.
	Fields []GetSchemaField `pulumi:"fields"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The unique identifier of the schema.
	SchemaId *string `pulumi:"schemaId"`
	// The schema's name.
	SchemaName *string `pulumi:"schemaName"`
}

func LookupSchemaOutput(ctx *pulumi.Context, args LookupSchemaOutputArgs, opts ...pulumi.InvokeOption) LookupSchemaResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSchemaResult, error) {
			args := v.(LookupSchemaArgs)
			r, err := LookupSchema(ctx, &args, opts...)
			return *r, err
		}).(LookupSchemaResultOutput)
}

// A collection of arguments for invoking getSchema.
type LookupSchemaOutputArgs struct {
	// The unique identifier of the schema.
	SchemaId pulumi.StringPtrInput `pulumi:"schemaId"`
	// The schema's name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (LookupSchemaOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaArgs)(nil)).Elem()
}

// A collection of values returned by getSchema.
type LookupSchemaResultOutput struct{ *pulumi.OutputState }

func (LookupSchemaResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSchemaResult)(nil)).Elem()
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutput() LookupSchemaResultOutput {
	return o
}

func (o LookupSchemaResultOutput) ToLookupSchemaResultOutputWithContext(ctx context.Context) LookupSchemaResultOutput {
	return o
}

// Display name for the schema.
func (o LookupSchemaResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// ETag of the resource.
func (o LookupSchemaResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Etag }).(pulumi.StringOutput)
}

// A list of fields in the schema.
func (o LookupSchemaResultOutput) Fields() GetSchemaFieldArrayOutput {
	return o.ApplyT(func(v LookupSchemaResult) []GetSchemaField { return v.Fields }).(GetSchemaFieldArrayOutput)
}

// The ID of this resource.
func (o LookupSchemaResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSchemaResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique identifier of the schema.
func (o LookupSchemaResultOutput) SchemaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.SchemaId }).(pulumi.StringPtrOutput)
}

// The schema's name.
func (o LookupSchemaResultOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSchemaResult) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSchemaResultOutput{})
}
