// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the `Authorization: Bearer`
// token used to authenticate HTTP requests to Google Admin SDK APIs. This is an alternative to `credentials`, and ignores
// the `scopes` field. If both are specified, `access_token` will be used over the `credentials` field.
func GetAccessToken(ctx *pulumi.Context) string {
	return config.Get(ctx, "googleWorkspace:accessToken")
}

// Either the path to or the contents of a service account key file in JSON format you can manage key files using the Cloud
// Console). If not provided, the application default credentials will be used.
func GetCredentials(ctx *pulumi.Context) string {
	return config.Get(ctx, "googleWorkspace:credentials")
}

// The customer id provided with your Google Workspace subscription. It is found in the admin console under Account
// Settings.
func GetCustomerId(ctx *pulumi.Context) string {
	return config.Get(ctx, "googleWorkspace:customerId")
}

// The impersonated user's email with access to the Admin APIs can access the Admin SDK Directory API.
// `impersonated_user_email` is required for all services except group and user management.
func GetImpersonatedUserEmail(ctx *pulumi.Context) string {
	return config.Get(ctx, "googleWorkspace:impersonatedUserEmail")
}

// The list of the scopes required for your application (for a list of possible scopes, see [Authorize
// requests](https://developers.google.com/admin-sdk/directory/v1/guides/authorizing))
func GetOauthScopes(ctx *pulumi.Context) string {
	return config.Get(ctx, "googleWorkspace:oauthScopes")
}

// The service account used to create the provided `access_token` if authenticating using the `access_token` method and
// needing to impersonate a user. This service account will require the GCP role `Service Account Token Creator` if needing
// to impersonate a user.
func GetServiceAccount(ctx *pulumi.Context) string {
	return config.Get(ctx, "googleWorkspace:serviceAccount")
}
