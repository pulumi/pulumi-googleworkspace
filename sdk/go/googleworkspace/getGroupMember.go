// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package googleWorkspace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetGroupMember(ctx *pulumi.Context, args *GetGroupMemberArgs, opts ...pulumi.InvokeOption) (*GetGroupMemberResult, error) {
	var rv GetGroupMemberResult
	err := ctx.Invoke("googleworkspace:index/getGroupMember:getGroupMember", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupMember.
type GetGroupMemberArgs struct {
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
	Email *string `pulumi:"email"`
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
	GroupId string `pulumi:"groupId"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	MemberId *string `pulumi:"memberId"`
}

// A collection of values returned by getGroupMember.
type GetGroupMemberResult struct {
	// Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages.
	DeliverySettings string `pulumi:"deliverySettings"`
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
	Email *string `pulumi:"email"`
	// ETag of the resource.
	Etag string `pulumi:"etag"`
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
	GroupId string `pulumi:"groupId"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	MemberId *string `pulumi:"memberId"`
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	Role string `pulumi:"role"`
	// Status of member.
	Status string `pulumi:"status"`
	// The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user.
	Type string `pulumi:"type"`
}

func GetGroupMemberOutput(ctx *pulumi.Context, args GetGroupMemberOutputArgs, opts ...pulumi.InvokeOption) GetGroupMemberResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGroupMemberResult, error) {
			args := v.(GetGroupMemberArgs)
			r, err := GetGroupMember(ctx, &args, opts...)
			return *r, err
		}).(GetGroupMemberResultOutput)
}

// A collection of arguments for invoking getGroupMember.
type GetGroupMemberOutputArgs struct {
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	MemberId pulumi.StringPtrInput `pulumi:"memberId"`
}

func (GetGroupMemberOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMemberArgs)(nil)).Elem()
}

// A collection of values returned by getGroupMember.
type GetGroupMemberResultOutput struct{ *pulumi.OutputState }

func (GetGroupMemberResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMemberResult)(nil)).Elem()
}

func (o GetGroupMemberResultOutput) ToGetGroupMemberResultOutput() GetGroupMemberResultOutput {
	return o
}

func (o GetGroupMemberResultOutput) ToGetGroupMemberResultOutputWithContext(ctx context.Context) GetGroupMemberResultOutput {
	return o
}

// Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages.
func (o GetGroupMemberResultOutput) DeliverySettings() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.DeliverySettings }).(pulumi.StringOutput)
}

// The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
func (o GetGroupMemberResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupMemberResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// ETag of the resource.
func (o GetGroupMemberResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
func (o GetGroupMemberResultOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.GroupId }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetGroupMemberResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.Id }).(pulumi.StringOutput)
}

// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
func (o GetGroupMemberResultOutput) MemberId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupMemberResult) *string { return v.MemberId }).(pulumi.StringPtrOutput)
}

// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
func (o GetGroupMemberResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.Role }).(pulumi.StringOutput)
}

// Status of member.
func (o GetGroupMemberResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.Status }).(pulumi.StringOutput)
}

// The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user.
func (o GetGroupMemberResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMemberResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupMemberResultOutput{})
}
