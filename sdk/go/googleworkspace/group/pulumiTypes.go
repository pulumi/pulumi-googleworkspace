// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package group

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GroupMembersMember struct {
	// Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages. Defaults to `ALL_MAIL`.
	DeliverySettings *string `pulumi:"deliverySettings"`
	// The member's email address. A member can be a user or another group. This property isrequired when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
	Email string `pulumi:"email"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	Id *string `pulumi:"id"`
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER. Defaults to `MEMBER`.
	Role *string `pulumi:"role"`
	// Status of member.
	Status *string `pulumi:"status"`
	// The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user. Defaults to `USER`.
	Type *string `pulumi:"type"`
}

// GroupMembersMemberInput is an input type that accepts GroupMembersMemberArgs and GroupMembersMemberOutput values.
// You can construct a concrete instance of `GroupMembersMemberInput` via:
//
//          GroupMembersMemberArgs{...}
type GroupMembersMemberInput interface {
	pulumi.Input

	ToGroupMembersMemberOutput() GroupMembersMemberOutput
	ToGroupMembersMemberOutputWithContext(context.Context) GroupMembersMemberOutput
}

type GroupMembersMemberArgs struct {
	// Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages. Defaults to `ALL_MAIL`.
	DeliverySettings pulumi.StringPtrInput `pulumi:"deliverySettings"`
	// The member's email address. A member can be a user or another group. This property isrequired when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
	Email pulumi.StringInput `pulumi:"email"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER. Defaults to `MEMBER`.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Status of member.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user. Defaults to `USER`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GroupMembersMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembersMember)(nil)).Elem()
}

func (i GroupMembersMemberArgs) ToGroupMembersMemberOutput() GroupMembersMemberOutput {
	return i.ToGroupMembersMemberOutputWithContext(context.Background())
}

func (i GroupMembersMemberArgs) ToGroupMembersMemberOutputWithContext(ctx context.Context) GroupMembersMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembersMemberOutput)
}

// GroupMembersMemberArrayInput is an input type that accepts GroupMembersMemberArray and GroupMembersMemberArrayOutput values.
// You can construct a concrete instance of `GroupMembersMemberArrayInput` via:
//
//          GroupMembersMemberArray{ GroupMembersMemberArgs{...} }
type GroupMembersMemberArrayInput interface {
	pulumi.Input

	ToGroupMembersMemberArrayOutput() GroupMembersMemberArrayOutput
	ToGroupMembersMemberArrayOutputWithContext(context.Context) GroupMembersMemberArrayOutput
}

type GroupMembersMemberArray []GroupMembersMemberInput

func (GroupMembersMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembersMember)(nil)).Elem()
}

func (i GroupMembersMemberArray) ToGroupMembersMemberArrayOutput() GroupMembersMemberArrayOutput {
	return i.ToGroupMembersMemberArrayOutputWithContext(context.Background())
}

func (i GroupMembersMemberArray) ToGroupMembersMemberArrayOutputWithContext(ctx context.Context) GroupMembersMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembersMemberArrayOutput)
}

type GroupMembersMemberOutput struct{ *pulumi.OutputState }

func (GroupMembersMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembersMember)(nil)).Elem()
}

func (o GroupMembersMemberOutput) ToGroupMembersMemberOutput() GroupMembersMemberOutput {
	return o
}

func (o GroupMembersMemberOutput) ToGroupMembersMemberOutputWithContext(ctx context.Context) GroupMembersMemberOutput {
	return o
}

// Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages. Defaults to `ALL_MAIL`.
func (o GroupMembersMemberOutput) DeliverySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.DeliverySettings }).(pulumi.StringPtrOutput)
}

// The member's email address. A member can be a user or another group. This property isrequired when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
func (o GroupMembersMemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembersMember) string { return v.Email }).(pulumi.StringOutput)
}

// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
func (o GroupMembersMemberOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER. Defaults to `MEMBER`.
func (o GroupMembersMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Status of member.
func (o GroupMembersMemberOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user. Defaults to `USER`.
func (o GroupMembersMemberOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupMembersMemberArrayOutput struct{ *pulumi.OutputState }

func (GroupMembersMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembersMember)(nil)).Elem()
}

func (o GroupMembersMemberArrayOutput) ToGroupMembersMemberArrayOutput() GroupMembersMemberArrayOutput {
	return o
}

func (o GroupMembersMemberArrayOutput) ToGroupMembersMemberArrayOutputWithContext(ctx context.Context) GroupMembersMemberArrayOutput {
	return o
}

func (o GroupMembersMemberArrayOutput) Index(i pulumi.IntInput) GroupMembersMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMembersMember {
		return vs[0].([]GroupMembersMember)[vs[1].(int)]
	}).(GroupMembersMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembersMemberInput)(nil)).Elem(), GroupMembersMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembersMemberArrayInput)(nil)).Elem(), GroupMembersMemberArray{})
	pulumi.RegisterOutputType(GroupMembersMemberOutput{})
	pulumi.RegisterOutputType(GroupMembersMemberArrayOutput{})
}
