# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ChromePolicyPolicy',
    'GmailSendAsAliasSmtpMsa',
    'SchemaField',
    'SchemaFieldNumericIndexingSpec',
    'UserAddress',
    'UserCustomSchema',
    'UserEmail',
    'UserExternalId',
    'UserIm',
    'UserKeyword',
    'UserLanguage',
    'UserLocation',
    'UserName',
    'UserOrganization',
    'UserPhone',
    'UserPosixAccount',
    'UserRelation',
    'UserSshPublicKey',
    'UserWebsite',
    'GetGroupMembersMemberResult',
    'GetPrivilegesItemResult',
    'GetRolePrivilegeResult',
    'GetSchemaFieldResult',
    'GetSchemaFieldNumericIndexingSpecResult',
    'GetUserAddressResult',
    'GetUserCustomSchemaResult',
    'GetUserEmailResult',
    'GetUserExternalIdResult',
    'GetUserImResult',
    'GetUserKeywordResult',
    'GetUserLanguageResult',
    'GetUserLocationResult',
    'GetUserNameResult',
    'GetUserOrganizationResult',
    'GetUserPhoneResult',
    'GetUserPosixAccountResult',
    'GetUserRelationResult',
    'GetUserSshPublicKeyResult',
    'GetUserWebsiteResult',
]

@pulumi.output_type
class ChromePolicyPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "schemaValues":
            suggest = "schema_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChromePolicyPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChromePolicyPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChromePolicyPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        """
        :param str schema_name: The full qualified name of the policy schema.
        :param Mapping[str, str] schema_values: JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The full qualified name of the policy schema.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        """
        JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class GmailSendAsAliasSmtpMsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityMode":
            suggest = "security_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GmailSendAsAliasSmtpMsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GmailSendAsAliasSmtpMsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GmailSendAsAliasSmtpMsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 port: int,
                 password: Optional[str] = None,
                 security_mode: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str host: The hostname of the SMTP service.
        :param int port: The port of the SMTP service.
        :param str password: The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        :param str security_mode: The protocol that will be used to secure communication with the SMTP service. Defaults to `securityModeUnspecified`.
        :param str username: The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The hostname of the SMTP service.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of the SMTP service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        """
        The protocol that will be used to secure communication with the SMTP service. Defaults to `securityModeUnspecified`.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class SchemaField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "fieldType":
            suggest = "field_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "fieldId":
            suggest = "field_id"
        elif key == "multiValued":
            suggest = "multi_valued"
        elif key == "numericIndexingSpec":
            suggest = "numeric_indexing_spec"
        elif key == "readAccessType":
            suggest = "read_access_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: str,
                 field_type: str,
                 display_name: Optional[str] = None,
                 etag: Optional[str] = None,
                 field_id: Optional[str] = None,
                 indexed: Optional[bool] = None,
                 multi_valued: Optional[bool] = None,
                 numeric_indexing_spec: Optional['outputs.SchemaFieldNumericIndexingSpec'] = None,
                 read_access_type: Optional[str] = None):
        """
        :param str field_name: The name of the field.
        :param str field_type: The type of the field. Acceptable values are: BOOL, DATE, DOUBLE, EMAIL, INT64, PHONE, STRING
        :param str display_name: Display Name of the field.
        :param str etag: The ETag of the field.
        :param str field_id: The unique identifier of the field.
        :param bool indexed: Boolean specifying whether the field is indexed or not. Defaults to `true`.
        :param bool multi_valued: A boolean specifying whether this is a multi-valued field or not. Defaults to `false`.
        :param 'SchemaFieldNumericIndexingSpecArgs' numeric_indexing_spec: Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.
        :param str read_access_type: Specifies who can view values of this field. See Retrieve users as a non-administrator for more information. Acceptable values are: ADMINS*AND*SELF or ALL*DOMAIN*USERS. Note: It may take up to 24 hours for changes to this field to be reflected. Defaults to `ALL_DOMAIN_USERS`.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if indexed is not None:
            pulumi.set(__self__, "indexed", indexed)
        if multi_valued is not None:
            pulumi.set(__self__, "multi_valued", multi_valued)
        if numeric_indexing_spec is not None:
            pulumi.set(__self__, "numeric_indexing_spec", numeric_indexing_spec)
        if read_access_type is not None:
            pulumi.set(__self__, "read_access_type", read_access_type)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        """
        The name of the field.
        """
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> str:
        """
        The type of the field. Acceptable values are: BOOL, DATE, DOUBLE, EMAIL, INT64, PHONE, STRING
        """
        return pulumi.get(self, "field_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display Name of the field.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        """
        The ETag of the field.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        """
        The unique identifier of the field.
        """
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def indexed(self) -> Optional[bool]:
        """
        Boolean specifying whether the field is indexed or not. Defaults to `true`.
        """
        return pulumi.get(self, "indexed")

    @property
    @pulumi.getter(name="multiValued")
    def multi_valued(self) -> Optional[bool]:
        """
        A boolean specifying whether this is a multi-valued field or not. Defaults to `false`.
        """
        return pulumi.get(self, "multi_valued")

    @property
    @pulumi.getter(name="numericIndexingSpec")
    def numeric_indexing_spec(self) -> Optional['outputs.SchemaFieldNumericIndexingSpec']:
        """
        Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the numericIndexingSpec allows range queries to be supported.
        """
        return pulumi.get(self, "numeric_indexing_spec")

    @property
    @pulumi.getter(name="readAccessType")
    def read_access_type(self) -> Optional[str]:
        """
        Specifies who can view values of this field. See Retrieve users as a non-administrator for more information. Acceptable values are: ADMINS*AND*SELF or ALL*DOMAIN*USERS. Note: It may take up to 24 hours for changes to this field to be reflected. Defaults to `ALL_DOMAIN_USERS`.
        """
        return pulumi.get(self, "read_access_type")


@pulumi.output_type
class SchemaFieldNumericIndexingSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaFieldNumericIndexingSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaFieldNumericIndexingSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaFieldNumericIndexingSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: Optional[float] = None,
                 min_value: Optional[float] = None):
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[float]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[float]:
        return pulumi.get(self, "min_value")


@pulumi.output_type
class UserAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "customType":
            suggest = "custom_type"
        elif key == "extendedAddress":
            suggest = "extended_address"
        elif key == "poBox":
            suggest = "po_box"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "sourceIsStructured":
            suggest = "source_is_structured"
        elif key == "streetAddress":
            suggest = "street_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 country: Optional[str] = None,
                 country_code: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 extended_address: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 po_box: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 source_is_structured: Optional[bool] = None,
                 street_address: Optional[str] = None):
        """
        :param str type: The address type. Acceptable values: `custom`, `home`, `other`, `work`.
        :param str country: Country
        :param str country_code: The country code. Uses the ISO 3166-1 standard.
        :param str custom_type: If the address type is custom, this property contains the custom value.
        :param str extended_address: For extended addresses, such as an address that includes a sub-region.
        :param str formatted: A full and unstructured postal address. This is not synced with the structured address fields.
        :param str locality: The town or city of the address.
        :param str po_box: The post office box, if present.
        :param str postal_code: The ZIP or postal code, if applicable.
        :param bool primary: If this is the user's primary address. The addresses list may contain only one primary address.
        :param str region: The abbreviated province or state.
        :param bool source_is_structured: Indicates if the user-supplied address was formatted. Formatted addresses are not currently supported.
        :param str street_address: The street address, such as 1600 Amphitheatre Parkway. Whitespace within the string is ignored; however, newlines are significant.
        """
        pulumi.set(__self__, "type", type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if extended_address is not None:
            pulumi.set(__self__, "extended_address", extended_address)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if po_box is not None:
            pulumi.set(__self__, "po_box", po_box)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_is_structured is not None:
            pulumi.set(__self__, "source_is_structured", source_is_structured)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The address type. Acceptable values: `custom`, `home`, `other`, `work`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        """
        Country
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        """
        The country code. Uses the ISO 3166-1 standard.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the address type is custom, this property contains the custom value.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="extendedAddress")
    def extended_address(self) -> Optional[str]:
        """
        For extended addresses, such as an address that includes a sub-region.
        """
        return pulumi.get(self, "extended_address")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        """
        A full and unstructured postal address. This is not synced with the structured address fields.
        """
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        """
        The town or city of the address.
        """
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> Optional[str]:
        """
        The post office box, if present.
        """
        return pulumi.get(self, "po_box")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        """
        The ZIP or postal code, if applicable.
        """
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        If this is the user's primary address. The addresses list may contain only one primary address.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The abbreviated province or state.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceIsStructured")
    def source_is_structured(self) -> Optional[bool]:
        """
        Indicates if the user-supplied address was formatted. Formatted addresses are not currently supported.
        """
        return pulumi.get(self, "source_is_structured")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        """
        The street address, such as 1600 Amphitheatre Parkway. Whitespace within the string is ignored; however, newlines are significant.
        """
        return pulumi.get(self, "street_address")


@pulumi.output_type
class UserCustomSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "schemaValues":
            suggest = "schema_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserCustomSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserCustomSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserCustomSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        """
        :param str schema_name: The name of the schema.
        :param Mapping[str, str] schema_values: JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        """
        JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class UserEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 address: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: The type of the email account. Acceptable values: `custom`, `home`, `other`, `work`.
        :param str address: The user's email address. Also serves as the email ID. This value can be the user's primary email address or an alias.
        :param str custom_type: If the value of type is custom, this property contains the custom type string.
        :param bool primary: Indicates if this is the user's primary email. Only one entry can be marked as primary. Defaults to `false`.
        """
        pulumi.set(__self__, "type", type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the email account. Acceptable values: `custom`, `home`, `other`, `work`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        The user's email address. Also serves as the email ID. This value can be the user's primary email address or an alias.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the value of type is custom, this property contains the custom type string.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        Indicates if this is the user's primary email. Only one entry can be marked as primary. Defaults to `false`.
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class UserExternalId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserExternalId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserExternalId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserExternalId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None):
        """
        :param str type: The type of external ID. If set to custom, customType must also be set. Acceptable values: `account`, `custom`, `customer`, `login_id`, `network`, `organization`.
        :param str value: The value of the ID.
        :param str custom_type: If the external ID type is custom, this property contains the custom value and must be set.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of external ID. If set to custom, customType must also be set. Acceptable values: `account`, `custom`, `customer`, `login_id`, `network`, `organization`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the ID.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the external ID type is custom, this property contains the custom value and must be set.
        """
        return pulumi.get(self, "custom_type")


@pulumi.output_type
class UserIm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProtocol":
            suggest = "custom_protocol"
        elif key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 type: str,
                 custom_protocol: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 im: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str protocol: An IM protocol identifies the IM network. The value can be a custom network or the standard network. Acceptable values: `aim`, `custom_protocol`, `gtalk`, `icq`, `jabber`, `msn`, `net_meeting`, `qq`, `skype`, `yahoo`.
        :param str type: Acceptable values: `custom`, `home`, `other`, `work`.
        :param str custom_protocol: If the protocol value is custom_protocol, this property holds the custom protocol's string.
        :param str custom_type: If the IM type is custom, this property holds the custom type string.
        :param str im: The user's IM network ID.
        :param bool primary: If this is the user's primary IM. Only one entry in the IM list can have a value of true.
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        if custom_protocol is not None:
            pulumi.set(__self__, "custom_protocol", custom_protocol)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if im is not None:
            pulumi.set(__self__, "im", im)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        An IM protocol identifies the IM network. The value can be a custom network or the standard network. Acceptable values: `aim`, `custom_protocol`, `gtalk`, `icq`, `jabber`, `msn`, `net_meeting`, `qq`, `skype`, `yahoo`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Acceptable values: `custom`, `home`, `other`, `work`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="customProtocol")
    def custom_protocol(self) -> Optional[str]:
        """
        If the protocol value is custom_protocol, this property holds the custom protocol's string.
        """
        return pulumi.get(self, "custom_protocol")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the IM type is custom, this property holds the custom type string.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def im(self) -> Optional[str]:
        """
        The user's IM network ID.
        """
        return pulumi.get(self, "im")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        If this is the user's primary IM. Only one entry in the IM list can have a value of true.
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class UserKeyword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserKeyword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserKeyword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserKeyword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None):
        """
        :param str type: Each entry can have a type which indicates standard type of that entry. For example, keyword could be of type occupation or outlook. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value. Acceptable values: `custom`, `mission`, `occupation`, `outlook`
        :param str value: Keyword.
        :param str custom_type: Custom Type.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Each entry can have a type which indicates standard type of that entry. For example, keyword could be of type occupation or outlook. In addition to the standard type, an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value. Acceptable values: `custom`, `mission`, `occupation`, `outlook`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Keyword.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        Custom Type.
        """
        return pulumi.get(self, "custom_type")


@pulumi.output_type
class UserLanguage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLanguage":
            suggest = "custom_language"
        elif key == "languageCode":
            suggest = "language_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserLanguage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserLanguage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserLanguage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_language: Optional[str] = None,
                 language_code: Optional[str] = None):
        """
        :param str custom_language: Other language. A user can provide their own language name if there is no corresponding Google III language code. If this is set, LanguageCode can't be set.
        :param str language_code: Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.
        """
        if custom_language is not None:
            pulumi.set(__self__, "custom_language", custom_language)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)

    @property
    @pulumi.getter(name="customLanguage")
    def custom_language(self) -> Optional[str]:
        """
        Other language. A user can provide their own language name if there is no corresponding Google III language code. If this is set, LanguageCode can't be set.
        """
        return pulumi.get(self, "custom_language")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        """
        Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.
        """
        return pulumi.get(self, "language_code")


@pulumi.output_type
class UserLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildingId":
            suggest = "building_id"
        elif key == "customType":
            suggest = "custom_type"
        elif key == "deskCode":
            suggest = "desk_code"
        elif key == "floorName":
            suggest = "floor_name"
        elif key == "floorSection":
            suggest = "floor_section"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 area: Optional[str] = None,
                 building_id: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 desk_code: Optional[str] = None,
                 floor_name: Optional[str] = None,
                 floor_section: Optional[str] = None):
        """
        :param str type: The location type. Acceptable values: `custom`, `default`, `desk`
        :param str area: Textual location. This is most useful for display purposes to concisely describe the location. For example, Mountain View, CA or Near Seattle.
        :param str building_id: Building identifier.
        :param str custom_type: If the location type is custom, this property contains the custom value.
        :param str desk_code: Most specific textual code of individual desk location.
        :param str floor_name: Floor name/number.
        :param str floor_section: Floor section. More specific location within the floor. For example, if a floor is divided into sections A, B, and C, this field would identify one of those values.
        """
        pulumi.set(__self__, "type", type)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if building_id is not None:
            pulumi.set(__self__, "building_id", building_id)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if desk_code is not None:
            pulumi.set(__self__, "desk_code", desk_code)
        if floor_name is not None:
            pulumi.set(__self__, "floor_name", floor_name)
        if floor_section is not None:
            pulumi.set(__self__, "floor_section", floor_section)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The location type. Acceptable values: `custom`, `default`, `desk`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        """
        Textual location. This is most useful for display purposes to concisely describe the location. For example, Mountain View, CA or Near Seattle.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="buildingId")
    def building_id(self) -> Optional[str]:
        """
        Building identifier.
        """
        return pulumi.get(self, "building_id")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the location type is custom, this property contains the custom value.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="deskCode")
    def desk_code(self) -> Optional[str]:
        """
        Most specific textual code of individual desk location.
        """
        return pulumi.get(self, "desk_code")

    @property
    @pulumi.getter(name="floorName")
    def floor_name(self) -> Optional[str]:
        """
        Floor name/number.
        """
        return pulumi.get(self, "floor_name")

    @property
    @pulumi.getter(name="floorSection")
    def floor_section(self) -> Optional[str]:
        """
        Floor section. More specific location within the floor. For example, if a floor is divided into sections A, B, and C, this field would identify one of those values.
        """
        return pulumi.get(self, "floor_section")


@pulumi.output_type
class UserName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "givenName":
            suggest = "given_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_name: str,
                 full_name: Optional[str] = None,
                 given_name: Optional[str] = None):
        """
        :param str family_name: The user's last name.
        :param str full_name: The user's full name formed by concatenating the first and last name values.
        :param str given_name: The user's first name.
        """
        pulumi.set(__self__, "family_name", family_name)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        The user's last name.
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        """
        The user's full name formed by concatenating the first and last name values.
        """
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        """
        The user's first name.
        """
        return pulumi.get(self, "given_name")


@pulumi.output_type
class UserOrganization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costCenter":
            suggest = "cost_center"
        elif key == "customType":
            suggest = "custom_type"
        elif key == "fullTimeEquivalent":
            suggest = "full_time_equivalent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserOrganization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserOrganization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserOrganization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cost_center: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 department: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 full_time_equivalent: Optional[int] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 symbol: Optional[str] = None,
                 title: Optional[str] = None):
        """
        :param str type: The type of organization. Acceptable values: `domain_only`, `school`, `unknown`, `work`.
        :param str cost_center: The cost center of the user's organization.
        :param str custom_type: If the value of type is custom, this property contains the custom value.
        :param str department: Specifies the department within the organization, such as sales or engineering.
        :param str description: The description of the organization.
        :param str domain: The domain the organization belongs to.
        :param int full_time_equivalent: The full-time equivalent millipercent within the organization (100000 = 100%)
        :param str location: The physical location of the organization. This does not need to be a fully qualified address.
        :param str name: The name of the organization.
        :param bool primary: Indicates if this is the user's primary organization. A user may only have one primary organization.
        :param str symbol: Text string symbol of the organization. For example, the text symbol for Google is GOOG.
        :param str title: The user's title within the organization. For example, member or engineer.
        """
        pulumi.set(__self__, "type", type)
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_time_equivalent is not None:
            pulumi.set(__self__, "full_time_equivalent", full_time_equivalent)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of organization. Acceptable values: `domain_only`, `school`, `unknown`, `work`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[str]:
        """
        The cost center of the user's organization.
        """
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the value of type is custom, this property contains the custom value.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def department(self) -> Optional[str]:
        """
        Specifies the department within the organization, such as sales or engineering.
        """
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the organization.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        The domain the organization belongs to.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullTimeEquivalent")
    def full_time_equivalent(self) -> Optional[int]:
        """
        The full-time equivalent millipercent within the organization (100000 = 100%)
        """
        return pulumi.get(self, "full_time_equivalent")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        The physical location of the organization. This does not need to be a fully qualified address.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        Indicates if this is the user's primary organization. A user may only have one primary organization.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def symbol(self) -> Optional[str]:
        """
        Text string symbol of the organization. For example, the text symbol for Google is GOOG.
        """
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        The user's title within the organization. For example, member or engineer.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class UserPhone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPhone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPhone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPhone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: The type of phone number. Acceptable values: `assistant`, `callback`, `car`, `company_main` , `custom`, `grand_central`, `home`, `home_fax`, `isdn`, `main`, `mobile`, `other`, `other_fax`, `pager`, `radio`, `telex`, `tty_tdd`, `work`, `work_fax`, `work_mobile`, `work_pager`.
        :param str value: A human-readable phone number. It may be in any telephone number format.
        :param str custom_type: If the value of type is custom, this property contains the custom type.
        :param bool primary: Indicates if this is the user's primary phone number. A user may only have one primary phone number.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of phone number. Acceptable values: `assistant`, `callback`, `car`, `company_main` , `custom`, `grand_central`, `home`, `home_fax`, `isdn`, `main`, `mobile`, `other`, `other_fax`, `pager`, `radio`, `telex`, `tty_tdd`, `work`, `work_fax`, `work_mobile`, `work_pager`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A human-readable phone number. It may be in any telephone number format.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the value of type is custom, this property contains the custom type.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        Indicates if this is the user's primary phone number. A user may only have one primary phone number.
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class UserPosixAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "homeDirectory":
            suggest = "home_directory"
        elif key == "operatingSystemType":
            suggest = "operating_system_type"
        elif key == "systemId":
            suggest = "system_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPosixAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPosixAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPosixAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 gecos: Optional[str] = None,
                 gid: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 operating_system_type: Optional[str] = None,
                 primary: Optional[bool] = None,
                 shell: Optional[str] = None,
                 system_id: Optional[str] = None,
                 uid: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str account_id: A POSIX account field identifier.
        :param str gecos: The GECOS (user information) for this account.
        :param str gid: The default group ID.
        :param str home_directory: The path to the home directory for this account.
        :param str operating_system_type: The operating system type for this account. Acceptable values: `linux`, `unspecified`, `windows`.
        :param bool primary: If this is user's primary account within the SystemId.
        :param str shell: The path to the login shell for this account.
        :param str system_id: System identifier for which account Username or Uid apply to.
        :param str uid: The POSIX compliant user ID.
        :param str username: The username of the account.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if operating_system_type is not None:
            pulumi.set(__self__, "operating_system_type", operating_system_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if shell is not None:
            pulumi.set(__self__, "shell", shell)
        if system_id is not None:
            pulumi.set(__self__, "system_id", system_id)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        """
        A POSIX account field identifier.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        """
        The GECOS (user information) for this account.
        """
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def gid(self) -> Optional[str]:
        """
        The default group ID.
        """
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        """
        The path to the home directory for this account.
        """
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="operatingSystemType")
    def operating_system_type(self) -> Optional[str]:
        """
        The operating system type for this account. Acceptable values: `linux`, `unspecified`, `windows`.
        """
        return pulumi.get(self, "operating_system_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        If this is user's primary account within the SystemId.
        """
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def shell(self) -> Optional[str]:
        """
        The path to the login shell for this account.
        """
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> Optional[str]:
        """
        System identifier for which account Username or Uid apply to.
        """
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        """
        The POSIX compliant user ID.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username of the account.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class UserRelation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserRelation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserRelation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserRelation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None):
        """
        :param str type: The type of relation. Acceptable values: `admin_assistant`, `assistant`, `brother`, `child`, `custom`, `domestic_partner`, `dotted_line_manager`, `exec_assistant`, `father`, `friend`, `manager`, `mother`, `parent`, `partner`, `referred_by`, `relative`, `sister`, `spouse`.
        :param str value: The name of the person the user is related to.
        :param str custom_type: If the value of type is custom, this property contains the custom type string.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of relation. Acceptable values: `admin_assistant`, `assistant`, `brother`, `child`, `custom`, `domestic_partner`, `dotted_line_manager`, `exec_assistant`, `father`, `friend`, `manager`, `mother`, `parent`, `partner`, `referred_by`, `relative`, `sister`, `spouse`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The name of the person the user is related to.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        If the value of type is custom, this property contains the custom type string.
        """
        return pulumi.get(self, "custom_type")


@pulumi.output_type
class UserSshPublicKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationTimeUsec":
            suggest = "expiration_time_usec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSshPublicKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSshPublicKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSshPublicKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 expiration_time_usec: Optional[str] = None,
                 fingerprint: Optional[str] = None):
        """
        :param str key: An SSH public key.
        :param str expiration_time_usec: An expiration time in microseconds since epoch.
        :param str fingerprint: A SHA-256 fingerprint of the SSH public key.
        """
        pulumi.set(__self__, "key", key)
        if expiration_time_usec is not None:
            pulumi.set(__self__, "expiration_time_usec", expiration_time_usec)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        An SSH public key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="expirationTimeUsec")
    def expiration_time_usec(self) -> Optional[str]:
        """
        An expiration time in microseconds since epoch.
        """
        return pulumi.get(self, "expiration_time_usec")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        """
        A SHA-256 fingerprint of the SSH public key.
        """
        return pulumi.get(self, "fingerprint")


@pulumi.output_type
class UserWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None,
                 primary: Optional[bool] = None):
        """
        :param str type: The type or purpose of the website. For example, a website could be labeled as home or blog. Alternatively, an entry can have a custom type Custom types must have a customType value. Acceptable values: `app_install_page`, `blog`, `custom`, `ftp` , `home`, `home_page`, `other`, `profile`, `reservations`, `resume`, `work`.
        :param str value: The URL of the website.
        :param str custom_type: The custom type. Only used if the type is custom.
        :param bool primary: If this is user's primary website or not.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type or purpose of the website. For example, a website could be labeled as home or blog. Alternatively, an entry can have a custom type Custom types must have a customType value. Acceptable values: `app_install_page`, `blog`, `custom`, `ftp` , `home`, `home_page`, `other`, `profile`, `reservations`, `resume`, `work`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The URL of the website.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        """
        The custom type. Only used if the type is custom.
        """
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        """
        If this is user's primary website or not.
        """
        return pulumi.get(self, "primary")


@pulumi.output_type
class GetGroupMembersMemberResult(dict):
    def __init__(__self__, *,
                 delivery_settings: str,
                 email: str,
                 id: str,
                 role: str,
                 status: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "delivery_settings", delivery_settings)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deliverySettings")
    def delivery_settings(self) -> str:
        return pulumi.get(self, "delivery_settings")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPrivilegesItemResult(dict):
    def __init__(__self__, *,
                 etag: str,
                 is_org_unit_scopable: bool,
                 privilege_name: str,
                 service_id: str,
                 service_name: str):
        """
        :param str etag: ETag of the resource.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "is_org_unit_scopable", is_org_unit_scopable)
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="isOrgUnitScopable")
    def is_org_unit_scopable(self) -> bool:
        return pulumi.get(self, "is_org_unit_scopable")

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> str:
        return pulumi.get(self, "privilege_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetRolePrivilegeResult(dict):
    def __init__(__self__, *,
                 privilege_name: str,
                 service_id: str):
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> str:
        return pulumi.get(self, "privilege_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")


@pulumi.output_type
class GetSchemaFieldResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 etag: str,
                 field_id: str,
                 field_name: str,
                 field_type: str,
                 indexed: bool,
                 multi_valued: bool,
                 numeric_indexing_specs: Sequence['outputs.GetSchemaFieldNumericIndexingSpecResult'],
                 read_access_type: str):
        """
        :param str display_name: Display name for the schema.
        :param str etag: ETag of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        pulumi.set(__self__, "indexed", indexed)
        pulumi.set(__self__, "multi_valued", multi_valued)
        pulumi.set(__self__, "numeric_indexing_specs", numeric_indexing_specs)
        pulumi.set(__self__, "read_access_type", read_access_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name for the schema.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> str:
        return pulumi.get(self, "field_type")

    @property
    @pulumi.getter
    def indexed(self) -> bool:
        return pulumi.get(self, "indexed")

    @property
    @pulumi.getter(name="multiValued")
    def multi_valued(self) -> bool:
        return pulumi.get(self, "multi_valued")

    @property
    @pulumi.getter(name="numericIndexingSpecs")
    def numeric_indexing_specs(self) -> Sequence['outputs.GetSchemaFieldNumericIndexingSpecResult']:
        return pulumi.get(self, "numeric_indexing_specs")

    @property
    @pulumi.getter(name="readAccessType")
    def read_access_type(self) -> str:
        return pulumi.get(self, "read_access_type")


@pulumi.output_type
class GetSchemaFieldNumericIndexingSpecResult(dict):
    def __init__(__self__, *,
                 max_value: float,
                 min_value: float):
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> float:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> float:
        return pulumi.get(self, "min_value")


@pulumi.output_type
class GetUserAddressResult(dict):
    def __init__(__self__, *,
                 country: str,
                 country_code: str,
                 custom_type: str,
                 extended_address: str,
                 formatted: str,
                 locality: str,
                 po_box: str,
                 postal_code: str,
                 primary: bool,
                 region: str,
                 source_is_structured: bool,
                 street_address: str,
                 type: str):
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "extended_address", extended_address)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "po_box", po_box)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_is_structured", source_is_structured)
        pulumi.set(__self__, "street_address", street_address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="extendedAddress")
    def extended_address(self) -> str:
        return pulumi.get(self, "extended_address")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> str:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> str:
        return pulumi.get(self, "po_box")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceIsStructured")
    def source_is_structured(self) -> bool:
        return pulumi.get(self, "source_is_structured")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> str:
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserCustomSchemaResult(dict):
    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class GetUserEmailResult(dict):
    def __init__(__self__, *,
                 address: str,
                 custom_type: str,
                 primary: bool,
                 type: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserExternalIdResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserImResult(dict):
    def __init__(__self__, *,
                 custom_protocol: str,
                 custom_type: str,
                 im: str,
                 primary: bool,
                 protocol: str,
                 type: str):
        pulumi.set(__self__, "custom_protocol", custom_protocol)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "im", im)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="customProtocol")
    def custom_protocol(self) -> str:
        return pulumi.get(self, "custom_protocol")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def im(self) -> str:
        return pulumi.get(self, "im")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserKeywordResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserLanguageResult(dict):
    def __init__(__self__, *,
                 custom_language: str,
                 language_code: str):
        pulumi.set(__self__, "custom_language", custom_language)
        pulumi.set(__self__, "language_code", language_code)

    @property
    @pulumi.getter(name="customLanguage")
    def custom_language(self) -> str:
        return pulumi.get(self, "custom_language")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        return pulumi.get(self, "language_code")


@pulumi.output_type
class GetUserLocationResult(dict):
    def __init__(__self__, *,
                 area: str,
                 building_id: str,
                 custom_type: str,
                 desk_code: str,
                 floor_name: str,
                 floor_section: str,
                 type: str):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "building_id", building_id)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "desk_code", desk_code)
        pulumi.set(__self__, "floor_name", floor_name)
        pulumi.set(__self__, "floor_section", floor_section)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="buildingId")
    def building_id(self) -> str:
        return pulumi.get(self, "building_id")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="deskCode")
    def desk_code(self) -> str:
        return pulumi.get(self, "desk_code")

    @property
    @pulumi.getter(name="floorName")
    def floor_name(self) -> str:
        return pulumi.get(self, "floor_name")

    @property
    @pulumi.getter(name="floorSection")
    def floor_section(self) -> str:
        return pulumi.get(self, "floor_section")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: str,
                 full_name: str,
                 given_name: str):
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")


@pulumi.output_type
class GetUserOrganizationResult(dict):
    def __init__(__self__, *,
                 cost_center: str,
                 custom_type: str,
                 department: str,
                 description: str,
                 domain: str,
                 full_time_equivalent: int,
                 location: str,
                 name: str,
                 primary: bool,
                 symbol: str,
                 title: str,
                 type: str):
        """
        :param str name: Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
        """
        pulumi.set(__self__, "cost_center", cost_center)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "department", department)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "full_time_equivalent", full_time_equivalent)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "symbol", symbol)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> str:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def department(self) -> str:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullTimeEquivalent")
    def full_time_equivalent(self) -> int:
        return pulumi.get(self, "full_time_equivalent")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def symbol(self) -> str:
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserPhoneResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 primary: bool,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserPosixAccountResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 gecos: str,
                 gid: str,
                 home_directory: str,
                 operating_system_type: str,
                 primary: bool,
                 shell: str,
                 system_id: str,
                 uid: str,
                 username: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "gecos", gecos)
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "home_directory", home_directory)
        pulumi.set(__self__, "operating_system_type", operating_system_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "shell", shell)
        pulumi.set(__self__, "system_id", system_id)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def gecos(self) -> str:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def gid(self) -> str:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> str:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="operatingSystemType")
    def operating_system_type(self) -> str:
        return pulumi.get(self, "operating_system_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def shell(self) -> str:
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUserRelationResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserSshPublicKeyResult(dict):
    def __init__(__self__, *,
                 expiration_time_usec: str,
                 fingerprint: str,
                 key: str):
        pulumi.set(__self__, "expiration_time_usec", expiration_time_usec)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="expirationTimeUsec")
    def expiration_time_usec(self) -> str:
        return pulumi.get(self, "expiration_time_usec")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetUserWebsiteResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 primary: bool,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


