# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGroupMembersResult',
    'AwaitableGetGroupMembersResult',
    'get_group_members',
    'get_group_members_output',
]

@pulumi.output_type
class GetGroupMembersResult:
    """
    A collection of values returned by getGroupMembers.
    """
    def __init__(__self__, etag=None, group_id=None, id=None, members=None):
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if members and not isinstance(members, list):
            raise TypeError("Expected argument 'members' to be a list")
        pulumi.set(__self__, "members", members)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetGroupMembersMemberResult']:
        """
        The members of the group
        """
        return pulumi.get(self, "members")


class AwaitableGetGroupMembersResult(GetGroupMembersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupMembersResult(
            etag=self.etag,
            group_id=self.group_id,
            id=self.id,
            members=self.members)


def get_group_members(group_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupMembersResult:
    """
    Use this data source to access information about an existing resource.

    :param str group_id: Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('googleworkspace:index/getGroupMembers:getGroupMembers', __args__, opts=opts, typ=GetGroupMembersResult).value

    return AwaitableGetGroupMembersResult(
        etag=__ret__.etag,
        group_id=__ret__.group_id,
        id=__ret__.id,
        members=__ret__.members)


@_utilities.lift_output_func(get_group_members)
def get_group_members_output(group_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupMembersResult]:
    """
    Use this data source to access information about an existing resource.

    :param str group_id: Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
    """
    ...
