# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGroupSettingsResult',
    'AwaitableGetGroupSettingsResult',
    'get_group_settings',
    'get_group_settings_output',
]

@pulumi.output_type
class GetGroupSettingsResult:
    """
    A collection of values returned by getGroupSettings.
    """
    def __init__(__self__, allow_external_members=None, allow_web_posting=None, archive_only=None, custom_footer_text=None, custom_reply_to=None, custom_roles_enabled_for_settings_to_be_merged=None, default_message_deny_notification_text=None, description=None, email=None, enable_collaborative_inbox=None, id=None, include_custom_footer=None, include_in_global_address_list=None, is_archived=None, members_can_post_as_the_group=None, message_moderation_level=None, name=None, primary_language=None, reply_to=None, send_message_deny_notification=None, spam_moderation_level=None, who_can_assist_content=None, who_can_contact_owner=None, who_can_discover_group=None, who_can_join=None, who_can_leave_group=None, who_can_moderate_content=None, who_can_moderate_members=None, who_can_post_message=None, who_can_view_group=None, who_can_view_membership=None):
        if allow_external_members and not isinstance(allow_external_members, bool):
            raise TypeError("Expected argument 'allow_external_members' to be a bool")
        pulumi.set(__self__, "allow_external_members", allow_external_members)
        if allow_web_posting and not isinstance(allow_web_posting, bool):
            raise TypeError("Expected argument 'allow_web_posting' to be a bool")
        pulumi.set(__self__, "allow_web_posting", allow_web_posting)
        if archive_only and not isinstance(archive_only, bool):
            raise TypeError("Expected argument 'archive_only' to be a bool")
        pulumi.set(__self__, "archive_only", archive_only)
        if custom_footer_text and not isinstance(custom_footer_text, str):
            raise TypeError("Expected argument 'custom_footer_text' to be a str")
        pulumi.set(__self__, "custom_footer_text", custom_footer_text)
        if custom_reply_to and not isinstance(custom_reply_to, str):
            raise TypeError("Expected argument 'custom_reply_to' to be a str")
        pulumi.set(__self__, "custom_reply_to", custom_reply_to)
        if custom_roles_enabled_for_settings_to_be_merged and not isinstance(custom_roles_enabled_for_settings_to_be_merged, bool):
            raise TypeError("Expected argument 'custom_roles_enabled_for_settings_to_be_merged' to be a bool")
        pulumi.set(__self__, "custom_roles_enabled_for_settings_to_be_merged", custom_roles_enabled_for_settings_to_be_merged)
        if default_message_deny_notification_text and not isinstance(default_message_deny_notification_text, str):
            raise TypeError("Expected argument 'default_message_deny_notification_text' to be a str")
        pulumi.set(__self__, "default_message_deny_notification_text", default_message_deny_notification_text)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if enable_collaborative_inbox and not isinstance(enable_collaborative_inbox, bool):
            raise TypeError("Expected argument 'enable_collaborative_inbox' to be a bool")
        pulumi.set(__self__, "enable_collaborative_inbox", enable_collaborative_inbox)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_custom_footer and not isinstance(include_custom_footer, bool):
            raise TypeError("Expected argument 'include_custom_footer' to be a bool")
        pulumi.set(__self__, "include_custom_footer", include_custom_footer)
        if include_in_global_address_list and not isinstance(include_in_global_address_list, bool):
            raise TypeError("Expected argument 'include_in_global_address_list' to be a bool")
        pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if is_archived and not isinstance(is_archived, bool):
            raise TypeError("Expected argument 'is_archived' to be a bool")
        pulumi.set(__self__, "is_archived", is_archived)
        if members_can_post_as_the_group and not isinstance(members_can_post_as_the_group, bool):
            raise TypeError("Expected argument 'members_can_post_as_the_group' to be a bool")
        pulumi.set(__self__, "members_can_post_as_the_group", members_can_post_as_the_group)
        if message_moderation_level and not isinstance(message_moderation_level, str):
            raise TypeError("Expected argument 'message_moderation_level' to be a str")
        pulumi.set(__self__, "message_moderation_level", message_moderation_level)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_language and not isinstance(primary_language, str):
            raise TypeError("Expected argument 'primary_language' to be a str")
        pulumi.set(__self__, "primary_language", primary_language)
        if reply_to and not isinstance(reply_to, str):
            raise TypeError("Expected argument 'reply_to' to be a str")
        pulumi.set(__self__, "reply_to", reply_to)
        if send_message_deny_notification and not isinstance(send_message_deny_notification, bool):
            raise TypeError("Expected argument 'send_message_deny_notification' to be a bool")
        pulumi.set(__self__, "send_message_deny_notification", send_message_deny_notification)
        if spam_moderation_level and not isinstance(spam_moderation_level, str):
            raise TypeError("Expected argument 'spam_moderation_level' to be a str")
        pulumi.set(__self__, "spam_moderation_level", spam_moderation_level)
        if who_can_assist_content and not isinstance(who_can_assist_content, str):
            raise TypeError("Expected argument 'who_can_assist_content' to be a str")
        pulumi.set(__self__, "who_can_assist_content", who_can_assist_content)
        if who_can_contact_owner and not isinstance(who_can_contact_owner, str):
            raise TypeError("Expected argument 'who_can_contact_owner' to be a str")
        pulumi.set(__self__, "who_can_contact_owner", who_can_contact_owner)
        if who_can_discover_group and not isinstance(who_can_discover_group, str):
            raise TypeError("Expected argument 'who_can_discover_group' to be a str")
        pulumi.set(__self__, "who_can_discover_group", who_can_discover_group)
        if who_can_join and not isinstance(who_can_join, str):
            raise TypeError("Expected argument 'who_can_join' to be a str")
        pulumi.set(__self__, "who_can_join", who_can_join)
        if who_can_leave_group and not isinstance(who_can_leave_group, str):
            raise TypeError("Expected argument 'who_can_leave_group' to be a str")
        pulumi.set(__self__, "who_can_leave_group", who_can_leave_group)
        if who_can_moderate_content and not isinstance(who_can_moderate_content, str):
            raise TypeError("Expected argument 'who_can_moderate_content' to be a str")
        pulumi.set(__self__, "who_can_moderate_content", who_can_moderate_content)
        if who_can_moderate_members and not isinstance(who_can_moderate_members, str):
            raise TypeError("Expected argument 'who_can_moderate_members' to be a str")
        pulumi.set(__self__, "who_can_moderate_members", who_can_moderate_members)
        if who_can_post_message and not isinstance(who_can_post_message, str):
            raise TypeError("Expected argument 'who_can_post_message' to be a str")
        pulumi.set(__self__, "who_can_post_message", who_can_post_message)
        if who_can_view_group and not isinstance(who_can_view_group, str):
            raise TypeError("Expected argument 'who_can_view_group' to be a str")
        pulumi.set(__self__, "who_can_view_group", who_can_view_group)
        if who_can_view_membership and not isinstance(who_can_view_membership, str):
            raise TypeError("Expected argument 'who_can_view_membership' to be a str")
        pulumi.set(__self__, "who_can_view_membership", who_can_view_membership)

    @property
    @pulumi.getter(name="allowExternalMembers")
    def allow_external_members(self) -> bool:
        """
        Identifies whether members external to your organization can join the group. If true, Google Workspace users external to your organization can become members of this group. If false, users not belonging to the organization are not allowed to become members of this group.
        """
        return pulumi.get(self, "allow_external_members")

    @property
    @pulumi.getter(name="allowWebPosting")
    def allow_web_posting(self) -> bool:
        """
        Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to communicate with the group.
        """
        return pulumi.get(self, "allow_web_posting")

    @property
    @pulumi.getter(name="archiveOnly")
    def archive_only(self) -> bool:
        """
        Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`, results in an error.
        """
        return pulumi.get(self, "archive_only")

    @property
    @pulumi.getter(name="customFooterText")
    def custom_footer_text(self) -> str:
        """
        Set the content of custom footer text. The maximum number of characters is 1,000.
        """
        return pulumi.get(self, "custom_footer_text")

    @property
    @pulumi.getter(name="customReplyTo")
    def custom_reply_to(self) -> str:
        """
        An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property must have a text value or an error is returned.
        """
        return pulumi.get(self, "custom_reply_to")

    @property
    @pulumi.getter(name="customRolesEnabledForSettingsToBeMerged")
    def custom_roles_enabled_for_settings_to_be_merged(self) -> bool:
        """
        Specifies whether the group has a custom role that's included in one of the settings being merged.
        """
        return pulumi.get(self, "custom_roles_enabled_for_settings_to_be_merged")

    @property
    @pulumi.getter(name="defaultMessageDenyNotificationText")
    def default_message_deny_notification_text(self) -> str:
        """
        When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters. Requires `send_message_deny_notification` property to be true.
        """
        return pulumi.get(self, "default_message_deny_notification_text")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the group. The maximum group description is no more than 300 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The group's email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enableCollaborativeInbox")
    def enable_collaborative_inbox(self) -> bool:
        """
        Specifies whether a collaborative inbox will remain turned on for the group.
        """
        return pulumi.get(self, "enable_collaborative_inbox")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeCustomFooter")
    def include_custom_footer(self) -> bool:
        """
        Whether to include custom footer.
        """
        return pulumi.get(self, "include_custom_footer")

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> bool:
        """
        Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List. If false, it is not included in the Global Address List.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> bool:
        """
        Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive of messages sent to this group. If false, previously archived messages remain in the archive.
        """
        return pulumi.get(self, "is_archived")

    @property
    @pulumi.getter(name="membersCanPostAsTheGroup")
    def members_can_post_as_the_group(self) -> bool:
        """
        Enables members to post messages as the group. If true, group member can post messages using the group's email address instead of their own email address. Message appear to originate from the group itself. Any message moderation settings on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in behalf of the group's email address.
        """
        return pulumi.get(self, "members_can_post_as_the_group")

    @property
    @pulumi.getter(name="messageModerationLevel")
    def message_moderation_level(self) -> str:
        """
        Moderation level of incoming messages. Possible values are: `MODERATE_ALL_MESSAGES`: All messages are sent to the group owner's email address for approval. If approved, the message is sent to the group. `MODERATE_NON_MEMBERS`: All messages from non group members are sent to the group owner's email address for approval. If approved, the message is sent to the group. `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address for approval. If approved, the message is sent to the group. `MODERATE_NONE`: No moderator approval is required. Messages are delivered directly to the group.Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not apply to posts made on behalf of the group.
        """
        return pulumi.get(self, "message_moderation_level")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the group, which has a maximum size of 75 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryLanguage")
    def primary_language(self) -> str:
        """
        The primary language for group. For a group's primary language use the language tags from the Google Workspace languages found at Google Workspace Email Settings API Email Language Tags.
        """
        return pulumi.get(self, "primary_language")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> str:
        """
        Specifies who receives the default reply. Possible values are: `REPLY_TO_CUSTOM`: For replies to messages, use the group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. `REPLY_TO_SENDER`: The reply sent to author of message. `REPLY_TO_LIST`: This reply message is sent to the group. `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. `REPLY_TO_MANAGERS`: This reply message is sent to the group's managers, which includes all managers and the group owner.
        """
        return pulumi.get(self, "reply_to")

    @property
    @pulumi.getter(name="sendMessageDenyNotification")
    def send_message_deny_notification(self) -> bool:
        """
        Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a message is rejected, send the deny message notification to the message author. The `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being true. If false, when a message is rejected, no notification is sent.
        """
        return pulumi.get(self, "send_message_deny_notification")

    @property
    @pulumi.getter(name="spamModerationLevel")
    def spam_moderation_level(self) -> str:
        """
        Specifies moderation levels for messages detected as spam. Possible values are: `ALLOW`: Post the message to the group. `MODERATE`: Send the message to the moderation queue. This is the default. `SILENTLY_MODERATE`: Send the message to the moderation queue, but do not send notification to moderators. `REJECT`: Immediately reject the message.
        """
        return pulumi.get(self, "spam_moderation_level")

    @property
    @pulumi.getter(name="whoCanAssistContent")
    def who_can_assist_content(self) -> str:
        """
        Specifies who can moderate metadata. Possible values are: `ALL_MEMBERS`, `OWNERS_AND_MANAGERS`, `MANAGERS_ONLY`, `OWNERS_ONLY`, `NONE`
        """
        return pulumi.get(self, "who_can_assist_content")

    @property
    @pulumi.getter(name="whoCanContactOwner")
    def who_can_contact_owner(self) -> str:
        """
        Permission to contact owner of the group via web UI. Possible values are: `ALL_IN_DOMAIN_CAN_CONTACT`, `ALL_MANAGERS_CAN_CONTACT`, `ALL_MEMBERS_CAN_CONTACT`, `ANYONE_CAN_CONTACT`
        """
        return pulumi.get(self, "who_can_contact_owner")

    @property
    @pulumi.getter(name="whoCanDiscoverGroup")
    def who_can_discover_group(self) -> str:
        """
        Specifies the set of users for whom this group is discoverable. Possible values are: `ANYONE_CAN_DISCOVER`, `ALL_IN_DOMAIN_CAN_DISCOVER`, `ALL_MEMBERS_CAN_DISCOVER`
        """
        return pulumi.get(self, "who_can_discover_group")

    @property
    @pulumi.getter(name="whoCanJoin")
    def who_can_join(self) -> str:
        """
        Permission to join group. Possible values are: `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your domain, can join the group. `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts with multiple domains. `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. `CAN_REQUEST_TO_JOIN`: Non members can request an invitation to join.
        """
        return pulumi.get(self, "who_can_join")

    @property
    @pulumi.getter(name="whoCanLeaveGroup")
    def who_can_leave_group(self) -> str:
        """
        Permission to leave the group. Possible values are: `ALL_MANAGERS_CAN_LEAVE`, `ALL_MEMBERS_CAN_LEAVE`, `NONE_CAN_LEAVE`
        """
        return pulumi.get(self, "who_can_leave_group")

    @property
    @pulumi.getter(name="whoCanModerateContent")
    def who_can_moderate_content(self) -> str:
        """
        Specifies who can moderate content. Possible values are: `ALL_MEMBERS`, `OWNERS_AND_MANAGERS`, `OWNERS_ONLY`, `NONE`
        """
        return pulumi.get(self, "who_can_moderate_content")

    @property
    @pulumi.getter(name="whoCanModerateMembers")
    def who_can_moderate_members(self) -> str:
        """
        Specifies who can manage members. Possible values are: `ALL_MEMBERS`, `OWNERS_AND_MANAGERS`, `OWNERS_ONLY`, `NONE`
        """
        return pulumi.get(self, "who_can_moderate_members")

    @property
    @pulumi.getter(name="whoCanPostMessage")
    def who_can_post_message(self) -> str:
        """
        Permissions to post messages. Possible values are: `NONE_CAN_POST`: The group is disabled and archived. No one can post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE*CAN*POST, results in an error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL*MANAGERS*CAN_POST. `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. `ALL_MEMBERS_CAN_POST`: Any group member can post a message. `ALL_OWNERS_CAN_POST`: Only group owners can post a message. `ALL_IN_DOMAIN_CAN_POST`: Anyone in the account can post a message. `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not belonging to the organization are not allowed to become members of this group.
        """
        return pulumi.get(self, "who_can_post_message")

    @property
    @pulumi.getter(name="whoCanViewGroup")
    def who_can_view_group(self) -> str:
        """
        Permissions to view group messages. Possible values are: `ANYONE_CAN_VIEW`: Any Internet user can view the group's messages. `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. `ALL_MEMBERS_CAN_VIEW`: All group members can view the group's messages. `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's messages.
        """
        return pulumi.get(self, "who_can_view_group")

    @property
    @pulumi.getter(name="whoCanViewMembership")
    def who_can_view_membership(self) -> str:
        """
        Permissions to view membership. Possible values are: `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the group members list. If a group already has external members, those members can still send email to this group. `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. `ALL_MANAGERS_CAN_VIEW`: The group managers can view group members list.
        """
        return pulumi.get(self, "who_can_view_membership")


class AwaitableGetGroupSettingsResult(GetGroupSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupSettingsResult(
            allow_external_members=self.allow_external_members,
            allow_web_posting=self.allow_web_posting,
            archive_only=self.archive_only,
            custom_footer_text=self.custom_footer_text,
            custom_reply_to=self.custom_reply_to,
            custom_roles_enabled_for_settings_to_be_merged=self.custom_roles_enabled_for_settings_to_be_merged,
            default_message_deny_notification_text=self.default_message_deny_notification_text,
            description=self.description,
            email=self.email,
            enable_collaborative_inbox=self.enable_collaborative_inbox,
            id=self.id,
            include_custom_footer=self.include_custom_footer,
            include_in_global_address_list=self.include_in_global_address_list,
            is_archived=self.is_archived,
            members_can_post_as_the_group=self.members_can_post_as_the_group,
            message_moderation_level=self.message_moderation_level,
            name=self.name,
            primary_language=self.primary_language,
            reply_to=self.reply_to,
            send_message_deny_notification=self.send_message_deny_notification,
            spam_moderation_level=self.spam_moderation_level,
            who_can_assist_content=self.who_can_assist_content,
            who_can_contact_owner=self.who_can_contact_owner,
            who_can_discover_group=self.who_can_discover_group,
            who_can_join=self.who_can_join,
            who_can_leave_group=self.who_can_leave_group,
            who_can_moderate_content=self.who_can_moderate_content,
            who_can_moderate_members=self.who_can_moderate_members,
            who_can_post_message=self.who_can_post_message,
            who_can_view_group=self.who_can_view_group,
            who_can_view_membership=self.who_can_view_membership)


def get_group_settings(email: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupSettingsResult:
    """
    Use this data source to access information about an existing resource.

    :param str email: The group's email address.
    """
    __args__ = dict()
    __args__['email'] = email
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('googleworkspace:index/getGroupSettings:getGroupSettings', __args__, opts=opts, typ=GetGroupSettingsResult).value

    return AwaitableGetGroupSettingsResult(
        allow_external_members=__ret__.allow_external_members,
        allow_web_posting=__ret__.allow_web_posting,
        archive_only=__ret__.archive_only,
        custom_footer_text=__ret__.custom_footer_text,
        custom_reply_to=__ret__.custom_reply_to,
        custom_roles_enabled_for_settings_to_be_merged=__ret__.custom_roles_enabled_for_settings_to_be_merged,
        default_message_deny_notification_text=__ret__.default_message_deny_notification_text,
        description=__ret__.description,
        email=__ret__.email,
        enable_collaborative_inbox=__ret__.enable_collaborative_inbox,
        id=__ret__.id,
        include_custom_footer=__ret__.include_custom_footer,
        include_in_global_address_list=__ret__.include_in_global_address_list,
        is_archived=__ret__.is_archived,
        members_can_post_as_the_group=__ret__.members_can_post_as_the_group,
        message_moderation_level=__ret__.message_moderation_level,
        name=__ret__.name,
        primary_language=__ret__.primary_language,
        reply_to=__ret__.reply_to,
        send_message_deny_notification=__ret__.send_message_deny_notification,
        spam_moderation_level=__ret__.spam_moderation_level,
        who_can_assist_content=__ret__.who_can_assist_content,
        who_can_contact_owner=__ret__.who_can_contact_owner,
        who_can_discover_group=__ret__.who_can_discover_group,
        who_can_join=__ret__.who_can_join,
        who_can_leave_group=__ret__.who_can_leave_group,
        who_can_moderate_content=__ret__.who_can_moderate_content,
        who_can_moderate_members=__ret__.who_can_moderate_members,
        who_can_post_message=__ret__.who_can_post_message,
        who_can_view_group=__ret__.who_can_view_group,
        who_can_view_membership=__ret__.who_can_view_membership)


@_utilities.lift_output_func(get_group_settings)
def get_group_settings_output(email: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupSettingsResult]:
    """
    Use this data source to access information about an existing resource.

    :param str email: The group's email address.
    """
    ...
