# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGroupMemberResult',
    'AwaitableGetGroupMemberResult',
    'get_group_member',
    'get_group_member_output',
]

@pulumi.output_type
class GetGroupMemberResult:
    """
    A collection of values returned by getGroupMember.
    """
    def __init__(__self__, delivery_settings=None, email=None, etag=None, group_id=None, id=None, member_id=None, role=None, status=None, type=None):
        if delivery_settings and not isinstance(delivery_settings, str):
            raise TypeError("Expected argument 'delivery_settings' to be a str")
        pulumi.set(__self__, "delivery_settings", delivery_settings)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if member_id and not isinstance(member_id, str):
            raise TypeError("Expected argument 'member_id' to be a str")
        pulumi.set(__self__, "member_id", member_id)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deliverySettings")
    def delivery_settings(self) -> str:
        """
        Defines mail delivery preferences of member. Acceptable values are:`ALL_MAIL`: All messages, delivered as soon as they arrive. `DAILY`: No more than one message a day. `DIGEST`: Up to 25 messages bundled into a single message. `DISABLED`: Remove subscription. `NONE`: No messages.
        """
        return pulumi.get(self, "delivery_settings")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        """
        The unique ID of the group member. A member id can be used as a member request URI's memberKey.
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a member of group2, group2 cannot be a member of group1. Acceptable values are: `MANAGER`: This role is only available if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. `OWNER`: This role can send messages to the group, add or remove members, change member roles, change group's settings, and delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of member.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of group member. Acceptable values are: `CUSTOMER`: The member represents all users in a domain. An email address is not returned and the ID returned is the customer ID. `GROUP`: The member is another group. `USER`: The member is a user.
        """
        return pulumi.get(self, "type")


class AwaitableGetGroupMemberResult(GetGroupMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupMemberResult(
            delivery_settings=self.delivery_settings,
            email=self.email,
            etag=self.etag,
            group_id=self.group_id,
            id=self.id,
            member_id=self.member_id,
            role=self.role,
            status=self.status,
            type=self.type)


def get_group_member(email: Optional[str] = None,
                     group_id: Optional[str] = None,
                     member_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupMemberResult:
    """
    Use this data source to access information about an existing resource.

    :param str email: The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
    :param str group_id: Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
    :param str member_id: The unique ID of the group member. A member id can be used as a member request URI's memberKey.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['groupId'] = group_id
    __args__['memberId'] = member_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('googleworkspace:index/getGroupMember:getGroupMember', __args__, opts=opts, typ=GetGroupMemberResult).value

    return AwaitableGetGroupMemberResult(
        delivery_settings=__ret__.delivery_settings,
        email=__ret__.email,
        etag=__ret__.etag,
        group_id=__ret__.group_id,
        id=__ret__.id,
        member_id=__ret__.member_id,
        role=__ret__.role,
        status=__ret__.status,
        type=__ret__.type)


@_utilities.lift_output_func(get_group_member)
def get_group_member_output(email: Optional[pulumi.Input[Optional[str]]] = None,
                            group_id: Optional[pulumi.Input[str]] = None,
                            member_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupMemberResult]:
    """
    Use this data source to access information about an existing resource.

    :param str email: The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.
    :param str group_id: Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
    :param str member_id: The unique ID of the group member. A member id can be used as a member request URI's memberKey.
    """
    ...
